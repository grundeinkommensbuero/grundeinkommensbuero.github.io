language: node_js

node_js:
  - '10.16.3'

before_install:
  - pip install --user awscli
  - export PATH=$PATH:$HOME/.local/bin

cache: yarn

script:
  - yarn
  - yarn run lint
  - |
    cat > .env.production << EOF
    CONTENTFUL_SPACE_ID='`$CONTENTFUL_SPACE_ID`'
    CONTENTFUL_ACCESS_TOKEN='`$CONTENTFUL_ACCESS_TOKEN`'
    COGNITO_APP_CLIENT_ID='`$COGNITO_APP_CLIENT_ID`'
    EOF
  - yarn run build

before_install:
  - |
    if [ "$TRAVIS_BRANCH" = "master" ]; then
      eval export CLOUDFRONT_DISTRIBUTION="$STAGING_CLOUDFRONT_DISTRIBUTION"
    elif [ "$TRAVIS_BRANCH" = "dev" ]; then
      eval export CLOUDFRONT_DISTRIBUTION="$DEV_CLOUDFRONT_DISTRIBUTION"
    fi

deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket: $PROD_S3_BUCKET
    acl: public_read
    local_dir: 'public'
    skip_cleanup: true
    region: 'eu-central-1'
    on:
      branch: master
      tags: true
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket: $STAGING_S3_BUCKET
    acl: public_read
    local_dir: 'public'
    skip_cleanup: true
    region: 'eu-central-1'
    on:
      branch: master
      condition: $IS_CONTENTFUL=true
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket: $DEV_S3_BUCKET
    acl: public_read
    local_dir: 'public'
    skip_cleanup: true
    region: 'eu-central-1'
    on:
      branch: dev
      tags: false
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket: $DEMO_S3_BUCKET
    acl: public_read
    local_dir: 'public'
    skip_cleanup: true
    region: 'eu-central-1'
    on:
      tags: true

after_deploy:
  - echo $CLOUDFRONT_DISTRIBUTION
  - aws configure set preview.cloudfront true
  - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION --paths "/*"
